{"ast":null,"code":"var _jsxFileName = \"/home/bobby/Desktop/NetflixClone/netflix-clone/src/Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport YouTube from 'react-youtube';\nimport axios from './axios'; // import requests from './requests';\n\nimport \"./Row.css\";\nimport movieTrailer from 'movie-trailer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({\n  title,\n  fetchUrl,\n  isLargeRow\n}) {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl); // console.log(request.data.results);\n\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]); // console.log(movies)\n\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 0\n    }\n  };\n\n  const handleClick = movie => {\n    // console.table(movie?.title)\n    if (trailerUrl) {\n      setTrailerUrl('');\n    } else {\n      movieTrailer((movie === null || movie === void 0 ? void 0 : movie.title) || \"\").then(url => {\n        const urlParams = new URLSearchParams(new URL(url).search);\n        setTrailerUrl(urlParams.get('v'));\n      }).catch(error => console.log(error));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: movies.map(movie => {\n        return /*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => handleClick(movie),\n          className: `row__poster ${isLargeRow && \"row__posterLarge\"}`,\n          src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n          alt: movie.name\n        }, movie.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 28\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), trailerUrl && /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: trailerUrl,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 28\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Row, \"L1ywPNv5QsX47ZoMAyL8l4aBE/I=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["/home/bobby/Desktop/NetflixClone/netflix-clone/src/Row.js"],"names":["React","useEffect","useState","YouTube","axios","movieTrailer","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","request","get","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","map","poster_path","backdrop_path","name","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,SAAd,EAAyBC,QAAzB,QAAwC,OAAxC;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,KAAP,MAAkB,SAAlB,C,CACA;;AACA,OAAO,WAAP;AACA,OAAOC,YAAP,MAAyB,eAAzB;;AAGA,MAAMC,QAAQ,GAAC,sCAAf;;AAEA,SAASC,GAAT,CAAa;AAACC,EAAAA,KAAD;AAAOC,EAAAA,QAAP;AAAgBC,EAAAA;AAAhB,CAAb,EAA0C;AAAA;;AACtC,QAAM,CAACC,MAAD,EAAQC,SAAR,IAAmBV,QAAQ,CAAC,EAAD,CAAjC;AACA,QAAM,CAACW,UAAD,EAAYC,aAAZ,IAA2BZ,QAAQ,CAAC,EAAD,CAAzC;AAIAD,EAAAA,SAAS,CAAC,MAAI;AACV,mBAAec,SAAf,GAA0B;AACtB,YAAMC,OAAO,GAAC,MAAMZ,KAAK,CAACa,GAAN,CAAUR,QAAV,CAApB,CADsB,CAEtB;;AACAG,MAAAA,SAAS,CAACI,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOH,OAAP;AAIH;;AACDD,IAAAA,SAAS;AAMZ,GAhBQ,EAgBP,CAACN,QAAD,CAhBO,CAAT,CANsC,CAwBtC;;AAEA,QAAMW,IAAI,GAAC;AACPC,IAAAA,MAAM,EAAC,KADA;AAEPC,IAAAA,KAAK,EAAC,MAFC;AAGPC,IAAAA,UAAU,EAAC;AACPC,MAAAA,QAAQ,EAAC;AADF;AAHJ,GAAX;;AASA,QAAMC,WAAW,GAAIC,KAAD,IAAW;AAC3B;AACA,QAAIb,UAAJ,EAAgB;AACdC,MAAAA,aAAa,CAAC,EAAD,CAAb;AACD,KAFD,MAEO;AACLT,MAAAA,YAAY,CAAC,CAAAqB,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAElB,KAAP,KAAgB,EAAjB,CAAZ,CACGmB,IADH,CACQC,GAAG,IAAI;AACX,cAAMC,SAAS,GAAG,IAAIC,eAAJ,CAAoB,IAAIC,GAAJ,CAAQH,GAAR,EAAaI,MAAjC,CAAlB;AACAlB,QAAAA,aAAa,CAACe,SAAS,CAACZ,GAAV,CAAc,GAAd,CAAD,CAAb;AACD,OAJH,EAIKgB,KAJL,CAIYC,KAAD,IAAWC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAJtB;AAKD;AACJ,GAXD;;AAiBA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACI;AAAA,gBAAK1B;AAAL;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,gBACKG,MAAM,CAAC0B,GAAP,CAAWX,KAAK,IAAE;AACf,4BAAO;AAEP,UAAA,OAAO,EAAE,MAAID,WAAW,CAACC,KAAD,CAFjB;AAGP,UAAA,SAAS,EAAG,eAAchB,UAAU,IAAI,kBAAmB,EAHpD;AAIP,UAAA,GAAG,EAAG,GAAEJ,QAAS,GAAEI,UAAU,GAAGgB,KAAK,CAACY,WAAT,GAAqBZ,KAAK,CAACa,aAAc,EAJ/D;AAIkE,UAAA,GAAG,EAAEb,KAAK,CAACc;AAJ7E,WACFd,KAAK,CAACe,EADJ;AAAA;AAAA;AAAA;AAAA,gBAAP;AAKH,OANA;AADL;AAAA;AAAA;AAAA;AAAA,YAFJ,EAeK5B,UAAU,iBAAI,QAAC,OAAD;AAAS,MAAA,OAAO,EAAEA,UAAlB;AAA8B,MAAA,IAAI,EAAEO;AAApC;AAAA;AAAA;AAAA;AAAA,YAfnB;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAmBH;;GAvEQb,G;;KAAAA,G;AAyET,eAAeA,GAAf","sourcesContent":["import React,{useEffect, useState} from 'react'\nimport YouTube from 'react-youtube';\nimport axios from './axios';\n// import requests from './requests';\nimport \"./Row.css\";\nimport movieTrailer from 'movie-trailer';\n\n\nconst base_url=\"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({title,fetchUrl,isLargeRow}) {\n    const [movies,setMovies]=useState([]);\n    const [trailerUrl,setTrailerUrl]=useState(\"\");\n\n\n\n    useEffect(()=>{\n        async function fetchData(){\n            const request=await axios.get(fetchUrl);\n            // console.log(request.data.results);\n            setMovies(request.data.results);\n            return request;\n\n\n\n        }\n        fetchData();\n\n\n    \n\n\n    },[fetchUrl]);\n\n    // console.log(movies)\n\n    const opts={\n        height:\"390\",\n        width:\"100%\",\n        playerVars:{\n            autoplay:0,\n\n        },\n    };\n\n    const handleClick = (movie) => {\n        // console.table(movie?.title)\n        if (trailerUrl) {\n          setTrailerUrl('')\n        } else {\n          movieTrailer(movie?.title || \"\")\n            .then(url => {\n              const urlParams = new URLSearchParams(new URL(url).search);\n              setTrailerUrl(urlParams.get('v'));\n            }).catch((error) => console.log(error));\n        }\n    }\n\n\n\n\n\n    return (\n        <div className=\"row\">\n            <h2>{title}</h2>\n            <div className=\"row__posters\">\n                {movies.map(movie=>{\n                    return <img \n                    key={movie.id}\n                    onClick={()=>handleClick(movie)}\n                    className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n                    src={`${base_url}${isLargeRow ? movie.poster_path:movie.backdrop_path}`} alt={movie.name} />\n                })}\n\n\n\n\n            </div>\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n        </div>\n    );\n}\n\nexport default Row\n\n\n\n\n \n\n"]},"metadata":{},"sourceType":"module"}