{"ast":null,"code":"import _regeneratorRuntime from\"/home/bobby/Desktop/NetflixClone/netflix-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/bobby/Desktop/NetflixClone/netflix-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/home/bobby/Desktop/NetflixClone/netflix-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import YouTube from'react-youtube';import axios from'./axios';// import requests from './requests';\nimport\"./Row.css\";import movieTrailer from'movie-trailer';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var base_url=\"https://image.tmdb.org/t/p/original/\";function Row(_ref){var title=_ref.title,fetchUrl=_ref.fetchUrl,isLargeRow=_ref.isLargeRow;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),movies=_useState2[0],setMovies=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),trailerUrl=_useState4[0],setTrailerUrl=_useState4[1];useEffect(function(){function fetchData(){return _fetchData.apply(this,arguments);}function _fetchData(){_fetchData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var request;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return axios.get(fetchUrl);case 2:request=_context.sent;// console.log(request.data.results);\nsetMovies(request.data.results);return _context.abrupt(\"return\",request);case 5:case\"end\":return _context.stop();}}},_callee);}));return _fetchData.apply(this,arguments);}fetchData();},[fetchUrl]);// console.log(movies)\nvar opts={height:\"390\",width:\"100%\",playerVars:{autoplay:1}};var handleClick=function handleClick(movie){// console.table(movie?.title)\nif(trailerUrl){setTrailerUrl('');}else{movieTrailer((movie===null||movie===void 0?void 0:movie.name)||\"\").then(function(url){var urlParams=new URLSearchParams(new URL(url).search);setTrailerUrl(urlParams.get(\"v\"));}).catch(function(error){return console.log(error);});}};return/*#__PURE__*/_jsxs(\"div\",{className:\"row\",children:[/*#__PURE__*/_jsx(\"h2\",{children:title}),/*#__PURE__*/_jsx(\"div\",{className:\"row__posters\",children:movies.map(function(movie){return/*#__PURE__*/_jsx(\"img\",{onClick:function onClick(){return handleClick(movie);},className:\"row__poster \".concat(isLargeRow&&\"row__posterLarge\"),src:\"\".concat(base_url).concat(isLargeRow?movie.poster_path:movie.backdrop_path),alt:movie.name},movie.id);})}),trailerUrl&&/*#__PURE__*/_jsx(YouTube,{videoId:trailerUrl,opts:opts})]});}export default Row;","map":{"version":3,"sources":["/home/bobby/Desktop/NetflixClone/netflix-clone/src/Row.js"],"names":["React","useEffect","useState","YouTube","axios","movieTrailer","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","get","request","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","map","poster_path","backdrop_path","id"],"mappings":"4eAAA,MAAOA,CAAAA,KAAP,EAAcC,SAAd,CAAyBC,QAAzB,KAAwC,OAAxC,CACA,MAAOC,CAAAA,OAAP,KAAoB,eAApB,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA;AACA,MAAO,WAAP,CACA,MAAOC,CAAAA,YAAP,KAAyB,eAAzB,C,wFAGA,GAAMC,CAAAA,QAAQ,CAAC,sCAAf,CAEA,QAASC,CAAAA,GAAT,MAA0C,IAA5BC,CAAAA,KAA4B,MAA5BA,KAA4B,CAAtBC,QAAsB,MAAtBA,QAAsB,CAAbC,UAAa,MAAbA,UAAa,CACtC,cAAyBR,QAAQ,CAAC,EAAD,CAAjC,wCAAOS,MAAP,eAAcC,SAAd,eACA,eAAiCV,QAAQ,CAAC,EAAD,CAAzC,yCAAOW,UAAP,eAAkBC,aAAlB,eAIAb,SAAS,CAAC,UAAI,SACKc,CAAAA,SADL,qIACV,qKACwBX,CAAAA,KAAK,CAACY,GAAN,CAAUP,QAAV,CADxB,QACUQ,OADV,eAEI;AACAL,SAAS,CAACK,OAAO,CAACC,IAAR,CAAaC,OAAd,CAAT,CAHJ,gCAIWF,OAJX,wDADU,4CAUVF,SAAS,GAMZ,CAhBQ,CAgBP,CAACN,QAAD,CAhBO,CAAT,CAkBA;AAEA,GAAMW,CAAAA,IAAI,CAAC,CACPC,MAAM,CAAC,KADA,CAEPC,KAAK,CAAC,MAFC,CAGPC,UAAU,CAAC,CACPC,QAAQ,CAAC,CADF,CAHJ,CAAX,CASA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,KAAD,CAAW,CAC3B;AACA,GAAIb,UAAJ,CAAgB,CACdC,aAAa,CAAC,EAAD,CAAb,CACD,CAFD,IAEO,CACLT,YAAY,CAAC,CAAAqB,KAAK,OAAL,EAAAA,KAAK,SAAL,QAAAA,KAAK,CAAEC,IAAP,GAAe,EAAhB,CAAZ,CACGC,IADH,CACQ,SAACC,GAAD,CAAS,CACb,GAAMC,CAAAA,SAAS,CAAG,GAAIC,CAAAA,eAAJ,CAAoB,GAAIC,CAAAA,GAAJ,CAAQH,GAAR,EAAaI,MAAjC,CAAlB,CACAnB,aAAa,CAACgB,SAAS,CAACd,GAAV,CAAc,GAAd,CAAD,CAAb,CACD,CAJH,EAKGkB,KALH,CAKS,SAACC,KAAD,QAAWC,CAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAAX,EALT,EAMD,CACJ,CAZD,CAkBA,mBACI,aAAK,SAAS,CAAC,KAAf,wBACI,oBAAK3B,KAAL,EADJ,cAEI,YAAK,SAAS,CAAC,cAAf,UACKG,MAAM,CAAC2B,GAAP,CAAW,SAACZ,KAAD,qBACR,YAEI,OAAO,CAAE,yBAAKD,CAAAA,WAAW,CAACC,KAAD,CAAhB,EAFb,CAGI,SAAS,uBAAiBhB,UAAU,EAAI,kBAA/B,CAHb,CAII,GAAG,WAAKJ,QAAL,SAAgBI,UAAU,CAAGgB,KAAK,CAACa,WAAT,CAAqBb,KAAK,CAACc,aAArD,CAJP,CAI6E,GAAG,CAAEd,KAAK,CAACC,IAJxF,EACSD,KAAK,CAACe,EADf,CADQ,EAAX,CADL,EAFJ,CAeK5B,UAAU,eAAI,KAAC,OAAD,EAAS,OAAO,CAAEA,UAAlB,CAA8B,IAAI,CAAEO,IAApC,EAfnB,GADJ,CAmBH,CAED,cAAeb,CAAAA,GAAf","sourcesContent":["import React,{useEffect, useState} from 'react'\nimport YouTube from 'react-youtube';\nimport axios from './axios';\n// import requests from './requests';\nimport \"./Row.css\";\nimport movieTrailer from 'movie-trailer';\n\n\nconst base_url=\"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({title,fetchUrl,isLargeRow}) {\n    const [movies,setMovies]=useState([]);\n    const [trailerUrl,setTrailerUrl]=useState(\"\");\n\n\n\n    useEffect(()=>{\n        async function fetchData(){\n            const request=await axios.get(fetchUrl);\n            // console.log(request.data.results);\n            setMovies(request.data.results);\n            return request;\n\n\n\n        }\n        fetchData();\n\n\n    \n\n\n    },[fetchUrl]);\n\n    // console.log(movies)\n\n    const opts={\n        height:\"390\",\n        width:\"100%\",\n        playerVars:{\n            autoplay:1,\n\n        },\n    };\n\n    const handleClick = (movie) => {\n        // console.table(movie?.title)\n        if (trailerUrl) {\n          setTrailerUrl('');\n        } else {\n          movieTrailer(movie?.name || \"\")\n            .then((url) => {\n              const urlParams = new URLSearchParams(new URL(url).search);\n              setTrailerUrl(urlParams.get(\"v\"));\n            })\n            .catch((error) => console.log(error));\n        }\n    };\n\n\n\n\n\n    return (\n        <div className=\"row\">\n            <h2>{title}</h2>\n            <div className=\"row__posters\">\n                {movies.map((movie)=>(\n                    <img \n                        key={movie.id}\n                        onClick={()=> handleClick(movie)}\n                        className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n                        src={`${base_url}${isLargeRow ? movie.poster_path:movie.backdrop_path}`} alt={movie.name} />\n                ))}\n\n\n\n\n            </div>\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n        </div>\n    );\n}\n\nexport default Row\n\n\n\n\n \n\n"]},"metadata":{},"sourceType":"module"}